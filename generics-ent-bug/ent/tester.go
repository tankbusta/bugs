// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"genericserr/ent/tester"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Tester is the model entity for the Tester schema.
type Tester struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tester) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tester.FieldID, tester.FieldAge:
			values[i] = new(sql.NullInt64)
		case tester.FieldName, tester.FieldUsername:
			values[i] = new(sql.NullString)
		case tester.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tester", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tester fields.
func (t *Tester) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tester.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tester.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				t.Age = int(value.Int64)
			}
		case tester.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tester.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				t.Username = value.String
			}
		case tester.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Tester.
// Note that you need to call Tester.Unwrap() before calling this method if this Tester
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tester) Update() *TesterUpdateOne {
	return (&TesterClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tester entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tester) Unwrap() *Tester {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tester is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tester) String() string {
	var builder strings.Builder
	builder.WriteString("Tester(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", t.Age))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", username=")
	builder.WriteString(t.Username)
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Testers is a parsable slice of Tester.
type Testers []*Tester

func (t Testers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
